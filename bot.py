import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.utils import executor
from config import TGBOT_API_KEY
from database import create_db, save_city, get_popular_cities, show_user_cities, clear_user_history
from weather import get_weather, get_weather_5days
from keyboards import get_weather_keyboard, get_history_keyboard

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏)
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TGBOT_API_KEY)
dp = Dispatcher(bot)

create_db()

# üîπ /start ‚Äì –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(commands=["start"])
async def start_command(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã. üå§\n"
        "–ù–∞–ø–∏—à–∏ /weather –∏ –≤—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π.\n"
        "–ú–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤: /history\n"
        "/help ‚Äì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"
    )

# üîπ /help ‚Äì –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['help'])
async def help_command(message: Message):
    await message.answer(
        "üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äì –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/weather ‚Äì –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É\n"
        "/history ‚Äì –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        "/help ‚Äì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"
        "–°–ø–∞—Å–∏–±–æ!"
    )

# üîπ /weather ‚Äì –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã
@dp.message_handler(commands=["weather"])
async def weather_command(message: Message):
    try:
        user_id = message.from_user.id
        popular_cities = get_popular_cities(user_id)  # –ü–æ–ª—É—á–∞–µ–º –¢–û–ü-3 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏ + –∫–Ω–æ–ø–∫–∞ "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"
        keyboard = get_weather_keyboard(popular_cities)

        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö:", reply_markup=keyboard)
        dp.register_message_handler(get_weather_info, content_types=types.ContentType.TEXT) # –£–∫–∞–∑–∞—Ç—å, –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ /weather
    except Exception as ex:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /weather: {ex}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# üîπ /forecast ‚Äì –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π
@dp.message_handler(commands=["forecast"])
async def forecast_command(message: Message):
    try:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π:")
        dp.register_message_handler(get_forecast_info, content_types=types.ContentType.TEXT)
    except Exception as ex:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /forecast: {ex}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        

# üîπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ (–∏–∑ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤—Ä—É—á–Ω—É—é)
async def get_weather_info(message: Message):

    try:
        city = message.text.strip()
        user_id = message.from_user.id

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"
        if city == "üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é":
            clear_user_history(user_id)
            await message.answer("‚úÖ –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—á–∏—â–µ–Ω–∞!", reply_markup=ReplyKeyboardRemove())
            return
        
        weather_text = await get_weather(city)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ OpenWeather API

        if "‚ùå" not in weather_text:  # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–∞–π–¥–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –ë–î
            save_city(user_id, city)

        await message.answer(weather_text, reply_markup=ReplyKeyboardRemove())  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∏ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
        dp.unregister_message_handler(get_weather_info)  # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞

    except Exception as ex:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã: {ex}")
        await message.answer("–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ1.")


# üîπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ (–∏–∑ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤—Ä—É—á–Ω—É—é –¥–ª—è /forecast)
async def get_forecast_info(message: Message):
    try:
        city = message.text.strip()
        user_id = message.from_user.id

        forecast_text = await get_weather_5days(city)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ OpenWeather API
        if "‚ùå" not in forecast_text:
            save_city(user_id, city)

        await message.answer(forecast_text, reply_markup=ReplyKeyboardRemove())  
        dp.unregister_message_handler(get_forecast_info)  # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞

    except Exception as ex:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ–≥–Ω–æ–∑–∞: {ex}")
        await message.answer("–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# üîπ /history ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≥–æ—Ä–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(commands=["history"])
async def history_command(message: Message):
    user_id = message.from_user.id
    history = show_user_cities(user_id)

    if not history:  # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞
        await message.answer("üìå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤.")
        return
    
    keyboard = get_history_keyboard(history)  # –ü–µ—Ä–µ–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤, –±–µ–∑ (–≥–æ—Ä–æ–¥, count)
    await message.answer("üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:", reply_markup=keyboard)


# üîπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
@dp.message_handler(lambda message: message.text.startswith("/"))
async def unknown_command(message: Message):
    await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞! –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
