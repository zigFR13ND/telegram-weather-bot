import os
import logging  # üìå –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏)
import requests  # üìå –ó–∞–ø—Ä–æ—Å—ã –∫ API
import aiohttp  # ‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
from aiogram import Bot, Dispatcher, types  # üìå aiogram ‚Äì –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –±–æ—Ç–æ–≤
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove # üìå –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–Ω–æ–ø–∫–∏
from aiogram.utils import executor  # üìå –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
from dotenv import load_dotenv # üìå –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–æ–º –≤ .env
from database import create_db, save_city, get_popular_cities, show_user_cities # üìå –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
TGBOT_API_KEY = os.getenv('TGBOT_API_KEY')  
# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
WEATHER_API_KEY = os.getenv('WEATHER_API_KEY')  

# ‚úÖ –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏)
logging.basicConfig(level=logging.INFO) 

# ‚úÖ –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=TGBOT_API_KEY) 
# ‚úÖ –°–æ–∑–¥–∞—ë–º "–¥–∏—Å–ø–µ—Ç—á–µ—Ä" (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥)
dp = Dispatcher(bot)

# ‚úÖ –°–æ–∑–¥–∞—ë–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
create_db() 

### ‚úÖ **–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å)**
async def get_weather(city):
    weather_today_url = f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru'

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(weather_today_url, timeout=5) as response:
                if response.status == 200:
                    data = await response.json()
                    temp = data["main"]["temp"]
                    if temp > 0:
                        temp = f'+{temp}'
                    wind = data["wind"]["speed"]
                    description = data["weather"][0]["description"]

                    return (
                        f"üìç –ì–æ—Ä–æ–¥: {city}\n"
                        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                        f"üí® –í–µ—Ç–µ—Ä: {wind} –º/—Å\n"
                        f"üå§ –û–ø–∏—Å–∞–Ω–∏–µ: {description.capitalize()}"
                    )
                elif response.status == 404:
                    return "‚ùå –û—à–∏–±–∫–∞! –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω."
                else:
                    return "‚ö† –û—à–∏–±–∫–∞! –ü–æ–≥–æ–¥–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

    except aiohttp.ClientError as e:
        logging.error(f"–û—à–∏–±–∫–∞ API OpenWeather: {e.status} {e.message}")
        return f"‚ùå –û—à–∏–±–∫–∞! –ü–æ–≥–æ–¥–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {e.status}."
    except aiohttp.ClientError as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenWeather: {e}")
        return "‚ùå –û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ–≥–æ–¥—ã."

# ‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
@dp.message_handler(commands=["start"])
async def start_command(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã. –ù–∞–ø–∏—à–∏ /weather, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É.")

# ‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /weather (–ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞)
@dp.message_handler(commands=["weather"])
async def weather_command(message: Message):
    user_id = message.from_user.id  # üìå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    popular_cities = get_popular_cities(user_id)  # üìå –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞

    # üìå –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    if popular_cities:
        for city in popular_cities:
            keyboard.add(KeyboardButton(city))  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –≥–æ—Ä–æ–¥–æ–º
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö:", reply_markup=keyboard)
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:")  # ‚ùå –ï—Å–ª–∏ –≥–æ—Ä–æ–¥–æ–≤ –Ω–µ—Ç ‚Äì –±–µ–∑ –∫–Ω–æ–ø–æ–∫

### ‚úÖ **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã)**
@dp.message_handler(lambda message: message.text)
async def process_city(message: Message):
    city = message.text.strip()  # üìå –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥, —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã
    user_id = message.from_user.id

    weather_info = await get_weather(city)  # ‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤

    if "–û—à–∏–±–∫–∞" not in weather_info:
        save_city(user_id, city)  # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ –±–∞–∑—É

    await message.answer(weather_info, reply_markup=ReplyKeyboardRemove())# ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏

# ‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /history
@dp.message_handler(commands=["history"])
async def history_command(message: Message):
    user_id = message.from_user.id  # üìå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    history = show_user_cities(user_id)  # üìå –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
    if not history:
        await message.answer("‚ùå –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /weather, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥–∞.")
        return

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    
    for city in history.split("\n"):
        keyboard.add(KeyboardButton(city))

    await message.answer("üìú –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:", reply_markup=keyboard)


# ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
